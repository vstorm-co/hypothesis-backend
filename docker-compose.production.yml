version: "3.7"

services:
    app:
        container_name: ${CONTAINER_NAME}-app
        build:
            dockerfile: docker/Dockerfile.prod
            context: .
        image: ${CONTAINER_NAME}/${CONTAINER_NAME}-app-image
        volumes:
            - ./app:/src
            - $HOME/.cache/pip-docker/:/root/.cache/pip
        depends_on:
            - db
        restart: on-failure
        env_file:
            - .env
        networks:
            - private
            - traefik_webgateway
        environment:
            - DEBUG=true
            - WATCHFILES_FORCE_POLLING=true
        labels:
            - traefik.enable=true
            - traefik.http.services.${CONTAINER_NAME}-app.loadbalancer.server.port=9000
            - traefik.http.routers.${CONTAINER_NAME}-app.rule=Host(`${API_HOST}`)
            - traefik.http.routers.${CONTAINER_NAME}-app.entrypoints=web
            # https
            - traefik.http.middlewares.${CONTAINER_NAME}-app-redirect-websecure.redirectscheme.scheme=https
            - traefik.http.routers.${CONTAINER_NAME}-app.middlewares=${CONTAINER_NAME}-app-redirect-websecure
            - traefik.http.routers.${CONTAINER_NAME}-app-websecure.rule=Host(`${API_HOST}`)
            - traefik.http.routers.${CONTAINER_NAME}-app-websecure.tls=true
            - traefik.http.routers.${CONTAINER_NAME}-app-websecure.tls.certresolver=letsencrypt
            - traefik.http.routers.${CONTAINER_NAME}-app-websecure.entrypoints=websecure
            - traefik.http.middlewares.${CONTAINER_NAME}-app-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS
            - traefik.http.middlewares.${CONTAINER_NAME}-app-cors.headers.accesscontrolallowheaders=Origin,Authorization,Accept
            - traefik.http.middlewares.${CONTAINER_NAME}-app-cors.headers.accesscontrolalloworiginlist=${CORS_ALLOWED}
            - traefik.http.middlewares.${CONTAINER_NAME}-app-cors.headers.accesscontrolmaxage=100
            - traefik.http.middlewares.${CONTAINER_NAME}-app-cors.headers.addvaryheader=true
            # WEBSOCKET
            # HTTP
            - traefik.http.routers.${CONTAINER_NAME}-ws.rule=Host(`${WS_HOST}`)
            - traefik.http.routers.${CONTAINER_NAME}-ws.entrypoints=web
            # HTTPS
            - traefik.http.middlewares.${CONTAINER_NAME}-ws-redirect-websecure.redirectscheme.scheme=https
            - traefik.http.routers.${CONTAINER_NAME}-ws.middlewares=${CONTAINER_NAME}-ws-redirect-websecure
            - traefik.http.routers.${CONTAINER_NAME}-ws-websecure.rule=Host(`${WS_HOST}`)
            - traefik.http.routers.${CONTAINER_NAME}-ws-websecure.tls=true
            - traefik.http.routers.${CONTAINER_NAME}-ws-websecure.tls.certresolver=letsencrypt
            - traefik.http.routers.${CONTAINER_NAME}-ws-websecure.entrypoints=websecure

    db:
        container_name: ${CONTAINER_NAME}-db
        image: postgres:15.4
        volumes:
            - hypothesis_postgres:/var/lib/postgresql/data
        healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "${DB_USER}" ]
            timeout: 45s
            interval: 10s
            retries: 10
        environment:
            - POSTGRES_DB=${DB_NAME}
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
        ports:
            - 5432:5435
        networks:
            - private

    redis:
        image: redis
        volumes:
            - redis:/data
        restart: on-failure
        networks:
            - private
        command:
            - 'redis-server'
            - '--requirepass myStrongPassword'

    celery_worker:
        container_name: ${CONTAINER_NAME}-celery_worker
        build:
          dockerfile: docker/Dockerfile.prod
          context: .
        image:  ${CONTAINER_NAME}/${CONTAINER_NAME}-celery-worker
        command: /start-celeryworker
        volumes:
          - .:/src
        restart: on-failure
        env_file:
          - .env
        depends_on:
          - redis
          - db

    celery_beat:
      container_name: ${CONTAINER_NAME}-celery_beat
      build:
        dockerfile: docker/Dockerfile.prod
        context: .
      image:  ${CONTAINER_NAME}/${CONTAINER_NAME}-celery-beat
      command: /start-celerybeat
      volumes:
        - .:/src
      restart: on-failure
      env_file:
        - .env
      depends_on:
        - redis
        - db

# TODO temporary disabled service
#     flower:
#       build:
#         dockerfile: docker/Dockerfile.prod
#         context: .
#       image:  ${CONTAINER_NAME}/${CONTAINER_NAME}-celery-flower
#       command: /start-flower
#       volumes:
#         - .:/src
#       restart: on-failure
#       env_file:
#         - .env
#       # todo remove ports after add traefik labels
#       ports:
#         - 5557:5555
#       depends_on:
#         - redis
#         - db

networks:
    traefik_webgateway:
        external: true
    private:
        driver: bridge

volumes:
    redis:
    hypothesis_postgres:
        external: true
